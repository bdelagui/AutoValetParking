#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Aug  4 23:20:03 2020

@author: berlindelaguila
"""



abstr_to_pixel = {1:((120,130),(60,60)),
                2:((135,145),(60,60)),
                3:((150,160),(60,60)),
                4:((155,165),(60,60)),
                5:((175,175),(65,75)),
                6:((175,175),(80,90)),
                7:((175,175),(95,105)),
                8:((175,175),(110,120)),
                9:((175,175),(125,135)),
                10:((170,170),(65,75)),
                11:((170,170),(80,90)),
                12:((170,170),(95,105)),
                13:((170,170),(110,120)),
                14:((170,170),(125,135)),
                15:((160,170),(140,150)),
                16:((155,165),(140,150)),
                17:((140,150),(150,150)),
                18:((125,140),(150,150)),
                19:((110,120),(150,150)),
                20:((95,105),(150,150)),
                21:((80,90),(150,150)),
                22:((65,75),(150,150)),               
                23:((50,60),(150,150)),
                24:((35,45),(150,150)),
                25:((20,30),(150,150)),
                26:((10,20),(155,165)),
                27:((10,10),(170,180)),
                28:((10,10),(185,195)),
                29:((10,10),(200,210)),
                30:((15,25),(210,220)),
                
                31:((30,40),(220,220)),
                32:((45,55),(220,220)),
                33:((55,65),(220,220)),
                34:((75,85),(220,220)),
                35:((90,100),(220,220)),
                36:((105,115),(220,220)),
                37:((120,130),(220,220)),
                38:((135,145),(220,220)),
                39:((150,160),(220,220)),
                40:((165,175),(220,220)),
                41:((180,190),(220,220)),
                
                42:((195,205),(205,215)),
                43:((190,200),(205,215)),
                44:((200,200),(190,200)),
                45:((200,200),(175,185)),
                46:((200,200),(160,170)),
                47:((200,200),(145,155)),
                48:((200,200),(130,140)),
                49:((200,200),(115,125)),
                50:((200,200),(100,110)),
                51:((200,200),(85,95)),
                52:((200,200),(70,80)),
                53:((205,215),(55,65)),
                
                54:((205,205),(190,200)),
                55:((205,205),(175,190)),        
                56:((205,205),(160,170)),
                57:((205,205),(145,155)),
                58:((205,205),(130,140)),
                59:((205,205),(115,125)),
                60:((205,205),(100,110)),
                61:((205,205),(85,95)),
                62:((205,205),(70,80)),
                63:((210,215),(60,70)),                
                64:((220,230),(55,55)),            
                65:((235,245),(55,55)),
                66:((250,260),(55,55))}

       
# pixels to abstract 
pixels_to_abstr = {v: k for k, v in abstr_to_pixel.items()}
#print(pixels_to_abstr)

x_bounds = dict()
y_bounds = dict()
midpoint = dict()
for keys, vals in abstr_to_pixel.items():
    x_bounds[keys] = vals[0]
    y_bounds[keys] = vals[1]
    midpoint[keys] = ((vals[0][0] + vals[0][1])/2, (vals[1][0] + vals[1][1])/2) # stores (xmid, ymid) for each abstract state
    #print(x_bounds,'\n')
    #print(y_bounds,'\n')
    #print(midpoint,'\n')

def convert_to_pixels(keys):    
   return (keys, midpoint[keys])

#print(convert_to_pixels(66))



pixel_range = dict()

for pixel_keys, state_vals in pixels_to_abstr.items():
    pixel_range[pixel_keys] = state_vals 


def convert_to_abstr(pixel_keys):
    return(pixel_range[pixel_keys])
    
print(convert_to_abstr(((205,205),(130,140))))

        